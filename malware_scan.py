import sys
import os
import hashlib
import json
import datetime
import math

# ---- Fake YARA check (replace with real yara-python if needed) ----
def fake_yara_scan(data):
    matches = []
    if b"MALWARE_TEST_SIGNATURE" in data:
        matches.append("FakeMalwareRule")
    return matches

# ---- Entropy calculation ----
def calculate_entropy(data):
    if not data:
        return 0.0
    byte_counts = [0] * 256
    for b in data:
        byte_counts[b] += 1
    entropy = 0.0
    for count in byte_counts:
        if count > 0:
            p = count / len(data)
            entropy -= p * math.log2(p)
    return entropy

# ---- SHA256 ----
def sha256_file(path):
    h = hashlib.sha256()
    with open(path, "rb") as f:
        for chunk in iter(lambda: f.read(8192), b""):
            h.update(chunk)
    return h.hexdigest()

# ---- Remediation ----
def remediate_file(path, matches):
    cleaned_path = path.replace(".raw", "_cleaned.raw")
    with open(path, "rb") as f:
        data = f.read()
    if b"MALWARE_TEST_SIGNATURE" in data:
        data = data.replace(b"MALWARE_TEST_SIGNATURE", b"SAFE_CLEANED_DATA_______")
    with open(cleaned_path, "wb") as f:
        f.write(data)
    return cleaned_path

# ---- Main scan ----
def scan_file(path):
    with open(path, "rb") as f:
        data = f.read()

    matches = fake_yara_scan(data)
    entropy = calculate_entropy(data)
    sha256 = sha256_file(path)

    result = {
        "meta": {
            "image": path,
            "sha256": sha256,
            "analyzed_at": datetime.datetime.utcnow().isoformat() + "Z",
            "tool": "malware_scan.py"
        },
        "features": {
            "malfind_hits": bool(matches),
            "process_count": 0,           # dummy (no volatility here)
            "dll_count_approx": 0,        # dummy
            "net_entries": 0,             # dummy
            "sample_entropy": entropy,
            "rwx_estimate": 1 if matches else 0
        },
        "yara_matches": matches,
        "suspicious_files": [],
        "remediation": {
            "status": "not_needed",
            "output_file": None
        },
        "vol_outputs_index": {}
    }

    # If malware found â†’ record suspicious offsets + remediate
    if matches:
        offset = data.find(b"MALWARE_TEST_SIGNATURE")
        result["suspicious_files"].append({
            "offset": offset,
            "signature": "MALWARE_TEST_SIGNATURE"
        })
        cleaned_file = remediate_file(path, matches)
        result["remediation"] = {
            "status": "success",
            "output_file": cleaned_file,
            "replaced_with": "SAFE_CLEANED_DATA_______"
        }

    return result

# ---- Entry point ----
if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python malware_scan.py <ram_image1> [<ram_image2> ...]")
        sys.exit(1)

    results = {}
    for ram_file in sys.argv[1:]:
        if os.path.exists(ram_file):
            results[ram_file] = scan_file(ram_file)
        else:
            results[ram_file] = {"error": "File not found"}

    print(json.dumps(results, indent=4))
